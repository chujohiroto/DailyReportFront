{"version":3,"sources":["serviceWorker.js","header.js","Component/textField.js","Component/button.js","Component/select.js","form.js","App.js","store.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","react_default","a","createElement","Fragment","AppBar_default","position","color","Toolbar_default","Typography_default","variant","this","props","title","Component","withStyles","theme","textField","marginLeft","spacing","unit","marginRight","width","input","classes","custom","Object","objectWithoutProperties","TextField_default","assign","className","inputProps","name","id","button","margin","leftIcon","rightIcon","iconSmall","fontSize","type","disabled","value","iconClassName","onClick","Button_default","Delete_default","classNames","Save_default","ControlledOpenSelect","state","member","open","handleChange","event","_this","setState","defineProperty","target","handleClose","handleOpen","_this$props","handleSubmit","members","autoComplete","onSubmit","FormControl_default","formControl","InputLabel_default","htmlFor","Select_default","onClose","onOpen","onChange","map","element","MenuItem_default","React","display","marginTop","minWidth","reduxForm","form","initialValues","date","moment","format","pristine","reset","submitting","Field","component","Select","label","renderTextField","multiline","rowsMax","Component_button","App","values","request","post","send","end","err","res","console","log","alert","status","header","src_form","save","reducer","combineReducers","reduxFormReducer","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58fba44a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nclass Header extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <AppBar position=\"static\" color=\"default\">\n                    <Toolbar>\n                        <Typography variant=\"title\" color=\"inherit\">\n                            {this.props.title}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = theme => ({\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: 300,\n    },\n});\n\nconst renderTextField = props => {\n    const { input, classes, ...custom } = props;\n    return (\n        <TextField\n            {...input}\n            {...custom}\n            className={classes.textField}\n            inputProps={{\n              name: 'value',\n              id: 'demo-controlled-open-select',\n            }}\n        />\n    );\n}\n\nrenderTextField.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(renderTextField);","import React from 'react';\nimport classNames from 'classnames';  // classNameに複数項目指定する場合に便利\nimport PropTypes from 'prop-types';  // 引数の型を指定する場合に必要\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from '@material-ui/icons/Save';\n\n// 作成するコンポネントのスタイルを設定する\nconst styles = theme => ({\n    button: {\n        margin: theme.spacing.unit,\n    },\n    leftIcon: {\n        marginRight: theme.spacing.unit,  // 通常のCSSの場合ハイフンで区切る(margin-right)ところを繋いで大文字にする\n    },\n    rightIcon: {\n        marginLeft: theme.spacing.unit,\n    },\n    iconSmall: {\n        fontSize: 20,\n    },\n});\n\n// 今回は色々な書き方に慣れるためにわざとconst, function, classをバラバラにしています\nfunction IconLabelButton(props) {\n    const { classes, type, disabled, variant, color, value, iconClassName, onClick } = props;\n    return (\n        <Button\n            variant={variant}\n            color={color}\n            className={classes.button}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}\n        >\n            {value}\n            {iconClassName === 'delete' &&  // 外から渡されたiconClassNameの値によって変化するようにします\n                <DeleteIcon className={classNames(classes.rightIcon, classes.iconSmall)} />\n            }\n            {iconClassName === 'save' &&\n                <SaveIcon className={classNames(classes.rightIcon, classes.iconSmall)} />\n            }\n        </Button>\n    );\n}\n\nIconLabelButton.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(IconLabelButton);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst styles = theme => ({\n  button: {\n    display: 'block',\n    marginTop: theme.spacing.unit * 2,\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120,\n  },\n});\n\nclass ControlledOpenSelect extends React.Component {\n  state = {\n    member: '',\n    open: false,\n  };\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  render() {\n    const { input, classes ,handleSubmit, members , ...custom} = this.props;\n\n    return (\n      <form autoComplete=\"off\" onSubmit ={handleSubmit}>\n        <FormControl className={classes.formControl}>\n          <InputLabel htmlFor=\"demo-controlled-open-select\">Member</InputLabel>\n          <Select\n            {...input}\n            {...custom}\n            className={classes.textField}\n            open={this.state.open}\n            onClose={this.handleClose}\n            onOpen={this.handleOpen}\n            value={this.state.member}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'member',\n              id: 'demo-controlled-open-select',\n            }}\n          >\n            {members.map((element) => {\n              return <MenuItem value={element}>{element}</MenuItem>\n            })}\n          </Select>\n        </FormControl>\n      </form>\n    );\n  }\n}\n\nControlledOpenSelect.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ControlledOpenSelect);","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from './Component/textField';  // 作成したコンポネントの呼び出し\nimport IconLabelButton from './Component/button';\nimport Select from './Component/select'\nimport 'react-widgets/dist/css/react-widgets.css'\nimport * as moment from 'moment';\n\nconst Form = props => {\n    const { handleSubmit, pristine, reset, submitting } = props;\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <div>\n                    <div>\n                        <Field\n                            id=\"member\"\n                            name=\"member\"\n                            component={Select}\n                            members={[\"Unknown\",\"kuramoto\",\"Suzuki\",\"chihara\",\"ikeda\",\"kato\",\"kra\",\"rion\",\"tamamura\",\"usui\",\"Chujo Hiroto\"]}\n                        />\n                    </div>\n                </div>\n                <div>\n                    <Field\n                        id=\"name\"\n                        name=\"date\"\n                        label=\"日付\"\n                        component={renderTextField}\n                        type=\"date\"\n                        margin=\"normal\"\n                    />\n                </div>\n            </div>      \n            <div>\n                <div>\n                    <div>\n                    <Field\n                        id=\"multiline-flexible\"\n                        name=\"done\"\n                        label=\"やったこと\"\n                        component={renderTextField}\n                        type=\"text\"\n                        multiline\n                        rowsMax=\"4\"\n                        margin=\"normal\"\n                    />\n                    </div>\n                    <div>\n                    <Field\n                        id=\"multiline-flexible\"\n                        name=\"todo\"\n                        label=\"やること\"\n                        component={renderTextField}\n                        type=\"text\"\n                        multiline\n                        rowsMax=\"4\"\n                        margin=\"normal\"\n                    />\n                    </div>\n                    <div>\n                    <Field\n                        id=\"multiline-flexible\"\n                        name=\"trouble\"\n                        label=\"困っていること\"\n                        component={renderTextField}\n                        type=\"text\"\n                        multiline\n                        rowsMax=\"4\"\n                        margin=\"normal\"\n                    />\n                    </div>\n                </div>\n            </div>\n            <div>\n                <IconLabelButton\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    value=\"送信\"\n                    iconClassName=\"send\"\n                    disabled={pristine || submitting}\n                    />\n                <IconLabelButton\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    value=\"クリア\"\n                    iconClassName=\"delete\"\n                    disabled={pristine || submitting}\n                    onClick={reset} />\n            </div>\n        </form>\n    );\n};\n\nexport default reduxForm({\n    form: 'input',\n    initialValues: {member : \"None\", date: moment().format('YYYY-MM-DD')}\n})(Form);","import React, { Component } from 'react';\nimport Header from './header';\nimport Form from './form';\nimport './App.css';\nimport request from 'superagent'\n\nclass App extends Component {\n  send(values){\n    if(values.member === \"None\")\n    {\n      return;\n    }\n    request.post(\"https://tea-app.jp:9010/sendMessage\")\n            .send(values)\n            .end(function(err, res) {\n    if (err) \n    {\n      console.log(err);\n      alert('エラーが発生しました。 ' + err);\n    } else {\n      console.log(res.status);\n      //alert('送信しました。');\n    }\n  });\n  }\n  save(values){\n    if(values.member === \"None\")\n    {\n      return;\n    }\n    request.post(\"https://tea-app.jp:9010/saveMessage\")\n            .send(values)\n            .end(function(err, res) {\n    if (err) \n    {\n      console.log(err);\n      alert('エラーが発生しました。 ' + err);\n    } \n    else \n    {\n      console.log(res.status);\n      //alert('セーブしました。　22時に自動で投稿されます。');\n    }\n  });\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Header title=\"Daily Report\" />\n                よる10時になると、自動で保存された内容が投稿されます。すぐに送信したい場合は送信ボタンを押してください。\n        <Form {...this.props} \n        onSubmit={values => this.send(values)} onChange={values => this.save(values)}>\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","import { createStore, combineReducers } from 'redux';\nimport { reducer as reduxFormReducer } from 'redux-form';\n\nconst reducer = combineReducers({\n  form: reduxFormReducer,\n});\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}